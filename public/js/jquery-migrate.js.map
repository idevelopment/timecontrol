{"version":3,"sources":["jquery-migrate.js"],"names":[],"mappingsfile":"jquery-migrate.js","sourcesContent":["/*!\n * jQuery Migrate - v1.2.1 - 2013-05-08\n * https://github.com/jquery/jquery-migrate\n * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors; Licensed MIT\n */\n(function( jQuery, window, undefined ) {\n// See http://bugs.jquery.com/ticket/13335\n// \"use strict\";\n\n\n    var warnedAbout = {};\n\n// List of warnings already given; public read only\n    jQuery.migrateWarnings = [];\n\n// Set to true to prevent console output; migrateWarnings still maintained\n// jQuery.migrateMute = false;\n\n// Show a message on the console so devs know we're active\n    if ( !jQuery.migrateMute && window.console && window.console.log ) {\n        window.console.log(\"JQMIGRATE: Logging is active\");\n    }\n\n// Set to false to disable traces that appear with warnings\n    if ( jQuery.migrateTrace === undefined ) {\n        jQuery.migrateTrace = true;\n    }\n\n// Forget any warnings we've already given; public\n    jQuery.migrateReset = function() {\n        warnedAbout = {};\n        jQuery.migrateWarnings.length = 0;\n    };\n\n    function migrateWarn( msg) {\n        var console = window.console;\n        if ( !warnedAbout[ msg ] ) {\n            warnedAbout[ msg ] = true;\n            jQuery.migrateWarnings.push( msg );\n            if ( console && console.warn && !jQuery.migrateMute ) {\n                console.warn( \"JQMIGRATE: \" + msg );\n                if ( jQuery.migrateTrace && console.trace ) {\n                    console.trace();\n                }\n            }\n        }\n    }\n\n    function migrateWarnProp( obj, prop, value, msg ) {\n        if ( Object.defineProperty ) {\n            // On ES5 browsers (non-oldIE), warn if the code tries to get prop;\n            // allow property to be overwritten in case some other plugin wants it\n            try {\n                Object.defineProperty( obj, prop, {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        migrateWarn( msg );\n                        return value;\n                    },\n                    set: function( newValue ) {\n                        migrateWarn( msg );\n                        value = newValue;\n                    }\n                });\n                return;\n            } catch( err ) {\n                // IE8 is a dope about Object.defineProperty, can't warn there\n            }\n        }\n\n        // Non-ES5 (or broken) browser; just set the property\n        jQuery._definePropertyBroken = true;\n        obj[ prop ] = value;\n    }\n\n    if ( document.compatMode === \"BackCompat\" ) {\n        // jQuery has never supported or tested Quirks Mode\n        migrateWarn( \"jQuery is not compatible with Quirks Mode\" );\n    }\n\n\n    var attrFn = jQuery( \"<input/>\", { size: 1 } ).attr(\"size\") && jQuery.attrFn,\n        oldAttr = jQuery.attr,\n        valueAttrGet = jQuery.attrHooks.value && jQuery.attrHooks.value.get ||\n            function() { return null; },\n        valueAttrSet = jQuery.attrHooks.value && jQuery.attrHooks.value.set ||\n            function() { return undefined; },\n        rnoType = /^(?:input|button)$/i,\n        rnoAttrNodeType = /^[238]$/,\n        rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,\n        ruseDefault = /^(?:checked|selected)$/i;\n\n// jQuery.attrFn\n    migrateWarnProp( jQuery, \"attrFn\", attrFn || {}, \"jQuery.attrFn is deprecated\" );\n\n    jQuery.attr = function( elem, name, value, pass ) {\n        var lowerName = name.toLowerCase(),\n            nType = elem && elem.nodeType;\n\n        if ( pass ) {\n            // Since pass is used internally, we only warn for new jQuery\n            // versions where there isn't a pass arg in the formal params\n            if ( oldAttr.length < 4 ) {\n                migrateWarn(\"jQuery.fn.attr( props, pass ) is deprecated\");\n            }\n            if ( elem && !rnoAttrNodeType.test( nType ) &&\n                (attrFn ? name in attrFn : jQuery.isFunction(jQuery.fn[name])) ) {\n                return jQuery( elem )[ name ]( value );\n            }\n        }\n\n        // Warn if user tries to set `type`, since it breaks on IE 6/7/8; by checking\n        // for disconnected elements we don't warn on $( \"<button>\", { type: \"button\" } ).\n        if ( name === \"type\" && value !== undefined && rnoType.test( elem.nodeName ) && elem.parentNode ) {\n            migrateWarn(\"Can't change the 'type' of an input or button in IE 6/7/8\");\n        }\n\n        // Restore boolHook for boolean property/attribute synchronization\n        if ( !jQuery.attrHooks[ lowerName ] && rboolean.test( lowerName ) ) {\n            jQuery.attrHooks[ lowerName ] = {\n                get: function( elem, name ) {\n                    // Align boolean attributes with corresponding properties\n                    // Fall back to attribute presence where some booleans are not supported\n                    var attrNode,\n                        property = jQuery.prop( elem, name );\n                    return property === true || typeof property !== \"boolean\" &&\n                    ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?\n\n                        name.toLowerCase() :\n                        undefined;\n                },\n                set: function( elem, value, name ) {\n                    var propName;\n                    if ( value === false ) {\n                        // Remove boolean attributes when set to false\n                        jQuery.removeAttr( elem, name );\n                    } else {\n                        // value is true since we know at this point it's type boolean and not false\n                        // Set boolean attributes to the same name and set the DOM property\n                        propName = jQuery.propFix[ name ] || name;\n                        if ( propName in elem ) {\n                            // Only set the IDL specifically if it already exists on the element\n                            elem[ propName ] = true;\n                        }\n\n                        elem.setAttribute( name, name.toLowerCase() );\n                    }\n                    return name;\n                }\n            };\n\n            // Warn only for attributes that can remain distinct from their properties post-1.9\n            if ( ruseDefault.test( lowerName ) ) {\n                migrateWarn( \"jQuery.fn.attr('\" + lowerName + \"') may use property instead of attribute\" );\n            }\n        }\n\n        return oldAttr.call( jQuery, elem, name, value );\n    };\n\n// attrHooks: value\n    jQuery.attrHooks.value = {\n        get: function( elem, name ) {\n            var nodeName = ( elem.nodeName || \"\" ).toLowerCase();\n            if ( nodeName === \"button\" ) {\n                return valueAttrGet.apply( this, arguments );\n            }\n            if ( nodeName !== \"input\" && nodeName !== \"option\" ) {\n                migrateWarn(\"jQuery.fn.attr('value') no longer gets properties\");\n            }\n            return name in elem ?\n                elem.value :\n                null;\n        },\n        set: function( elem, value ) {\n            var nodeName = ( elem.nodeName || \"\" ).toLowerCase();\n            if ( nodeName === \"button\" ) {\n                return valueAttrSet.apply( this, arguments );\n            }\n            if ( nodeName !== \"input\" && nodeName !== \"option\" ) {\n                migrateWarn(\"jQuery.fn.attr('value', val) no longer sets properties\");\n            }\n            // Does not return so that setAttribute is also used\n            elem.value = value;\n        }\n    };\n\n\n    var matched, browser,\n        oldInit = jQuery.fn.init,\n        oldParseJSON = jQuery.parseJSON,\n    // Note: XSS check is done below after string is trimmed\n        rquickExpr = /^([^<]*)(<[\\w\\W]+>)([^>]*)$/;\n\n// $(html) \"looks like html\" rule change\n    jQuery.fn.init = function( selector, context, rootjQuery ) {\n        var match;\n\n        if ( selector && typeof selector === \"string\" && !jQuery.isPlainObject( context ) &&\n            (match = rquickExpr.exec( jQuery.trim( selector ) )) && match[ 0 ] ) {\n            // This is an HTML string according to the \"old\" rules; is it still?\n            if ( selector.charAt( 0 ) !== \"<\" ) {\n                migrateWarn(\"$(html) HTML strings must start with '<' character\");\n            }\n            if ( match[ 3 ] ) {\n                migrateWarn(\"$(html) HTML text after last tag is ignored\");\n            }\n            // Consistently reject any HTML-like string starting with a hash (#9521)\n            // Note that this may break jQuery 1.6.x code that otherwise would work.\n            if ( match[ 0 ].charAt( 0 ) === \"#\" ) {\n                migrateWarn(\"HTML string cannot start with a '#' character\");\n                jQuery.error(\"JQMIGRATE: Invalid selector string (XSS)\");\n            }\n            // Now process using loose rules; let pre-1.8 play too\n            if ( context && context.context ) {\n                // jQuery object as context; parseHTML expects a DOM object\n                context = context.context;\n            }\n            if ( jQuery.parseHTML ) {\n                return oldInit.call( this, jQuery.parseHTML( match[ 2 ], context, true ),\n                    context, rootjQuery );\n            }\n        }\n        return oldInit.apply( this, arguments );\n    };\n    jQuery.fn.init.prototype = jQuery.fn;\n\n// Let $.parseJSON(falsy_value) return null\n    jQuery.parseJSON = function( json ) {\n        if ( !json && json !== null ) {\n            migrateWarn(\"jQuery.parseJSON requires a valid JSON string\");\n            return null;\n        }\n        return oldParseJSON.apply( this, arguments );\n    };\n\n    jQuery.uaMatch = function( ua ) {\n        ua = ua.toLowerCase();\n\n        var match = /(chrome)[ \\/]([\\w.]+)/.exec( ua ) ||\n            /(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||\n            /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( ua ) ||\n            /(msie) ([\\w.]+)/.exec( ua ) ||\n            ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( ua ) ||\n            [];\n\n        return {\n            browser: match[ 1 ] || \"\",\n            version: match[ 2 ] || \"0\"\n        };\n    };\n\n// Don't clobber any existing jQuery.browser in case it's different\n    if ( !jQuery.browser ) {\n        matched = jQuery.uaMatch( navigator.userAgent );\n        browser = {};\n\n        if ( matched.browser ) {\n            browser[ matched.browser ] = true;\n            browser.version = matched.version;\n        }\n\n        // Chrome is Webkit, but Webkit is also Safari.\n        if ( browser.chrome ) {\n            browser.webkit = true;\n        } else if ( browser.webkit ) {\n            browser.safari = true;\n        }\n\n        jQuery.browser = browser;\n    }\n\n// Warn if the code tries to get jQuery.browser\n    migrateWarnProp( jQuery, \"browser\", jQuery.browser, \"jQuery.browser is deprecated\" );\n\n    jQuery.sub = function() {\n        function jQuerySub( selector, context ) {\n            return new jQuerySub.fn.init( selector, context );\n        }\n        jQuery.extend( true, jQuerySub, this );\n        jQuerySub.superclass = this;\n        jQuerySub.fn = jQuerySub.prototype = this();\n        jQuerySub.fn.constructor = jQuerySub;\n        jQuerySub.sub = this.sub;\n        jQuerySub.fn.init = function init( selector, context ) {\n            if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {\n                context = jQuerySub( context );\n            }\n\n            return jQuery.fn.init.call( this, selector, context, rootjQuerySub );\n        };\n        jQuerySub.fn.init.prototype = jQuerySub.fn;\n        var rootjQuerySub = jQuerySub(document);\n        migrateWarn( \"jQuery.sub() is deprecated\" );\n        return jQuerySub;\n    };\n\n\n// Ensure that $.ajax gets the new parseJSON defined in core.js\n    jQuery.ajaxSetup({\n        converters: {\n            \"text json\": jQuery.parseJSON\n        }\n    });\n\n\n    var oldFnData = jQuery.fn.data;\n\n    jQuery.fn.data = function( name ) {\n        var ret, evt,\n            elem = this[0];\n\n        // Handles 1.7 which has this behavior and 1.8 which doesn't\n        if ( elem && name === \"events\" && arguments.length === 1 ) {\n            ret = jQuery.data( elem, name );\n            evt = jQuery._data( elem, name );\n            if ( ( ret === undefined || ret === evt ) && evt !== undefined ) {\n                migrateWarn(\"Use of jQuery.fn.data('events') is deprecated\");\n                return evt;\n            }\n        }\n        return oldFnData.apply( this, arguments );\n    };\n\n\n    var rscriptType = /\\/(java|ecma)script/i,\n        oldSelf = jQuery.fn.andSelf || jQuery.fn.addBack;\n\n    jQuery.fn.andSelf = function() {\n        migrateWarn(\"jQuery.fn.andSelf() replaced by jQuery.fn.addBack()\");\n        return oldSelf.apply( this, arguments );\n    };\n\n// Since jQuery.clean is used internally on older versions, we only shim if it's missing\n    if ( !jQuery.clean ) {\n        jQuery.clean = function( elems, context, fragment, scripts ) {\n            // Set context per 1.8 logic\n            context = context || document;\n            context = !context.nodeType && context[0] || context;\n            context = context.ownerDocument || context;\n\n            migrateWarn(\"jQuery.clean() is deprecated\");\n\n            var i, elem, handleScript, jsTags,\n                ret = [];\n\n            jQuery.merge( ret, jQuery.buildFragment( elems, context ).childNodes );\n\n            // Complex logic lifted directly from jQuery 1.8\n            if ( fragment ) {\n                // Special handling of each script element\n                handleScript = function( elem ) {\n                    // Check if we consider it executable\n                    if ( !elem.type || rscriptType.test( elem.type ) ) {\n                        // Detach the script and store it in the scripts array (if provided) or the fragment\n                        // Return truthy to indicate that it has been handled\n                        return scripts ?\n                            scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :\n                            fragment.appendChild( elem );\n                    }\n                };\n\n                for ( i = 0; (elem = ret[i]) != null; i++ ) {\n                    // Check if we're done after handling an executable script\n                    if ( !( jQuery.nodeName( elem, \"script\" ) && handleScript( elem ) ) ) {\n                        // Append to fragment and handle embedded scripts\n                        fragment.appendChild( elem );\n                        if ( typeof elem.getElementsByTagName !== \"undefined\" ) {\n                            // handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration\n                            jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName(\"script\") ), handleScript );\n\n                            // Splice the scripts into ret after their former ancestor and advance our index beyond them\n                            ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );\n                            i += jsTags.length;\n                        }\n                    }\n                }\n            }\n\n            return ret;\n        };\n    }\n\n    var eventAdd = jQuery.event.add,\n        eventRemove = jQuery.event.remove,\n        eventTrigger = jQuery.event.trigger,\n        oldToggle = jQuery.fn.toggle,\n        oldLive = jQuery.fn.live,\n        oldDie = jQuery.fn.die,\n        ajaxEvents = \"ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess\",\n        rajaxEvent = new RegExp( \"\\\\b(?:\" + ajaxEvents + \")\\\\b\" ),\n        rhoverHack = /(?:^|\\s)hover(\\.\\S+|)\\b/,\n        hoverHack = function( events ) {\n            if ( typeof( events ) !== \"string\" || jQuery.event.special.hover ) {\n                return events;\n            }\n            if ( rhoverHack.test( events ) ) {\n                migrateWarn(\"'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'\");\n            }\n            return events && events.replace( rhoverHack, \"mouseenter$1 mouseleave$1\" );\n        };\n\n// Event props removed in 1.9, put them back if needed; no practical way to warn them\n    if ( jQuery.event.props && jQuery.event.props[ 0 ] !== \"attrChange\" ) {\n        jQuery.event.props.unshift( \"attrChange\", \"attrName\", \"relatedNode\", \"srcElement\" );\n    }\n\n// Undocumented jQuery.event.handle was \"deprecated\" in jQuery 1.7\n    if ( jQuery.event.dispatch ) {\n        migrateWarnProp( jQuery.event, \"handle\", jQuery.event.dispatch, \"jQuery.event.handle is undocumented and deprecated\" );\n    }\n\n// Support for 'hover' pseudo-event and ajax event warnings\n    jQuery.event.add = function( elem, types, handler, data, selector ){\n        if ( elem !== document && rajaxEvent.test( types ) ) {\n            migrateWarn( \"AJAX events should be attached to document: \" + types );\n        }\n        eventAdd.call( this, elem, hoverHack( types || \"\" ), handler, data, selector );\n    };\n    jQuery.event.remove = function( elem, types, handler, selector, mappedTypes ){\n        eventRemove.call( this, elem, hoverHack( types ) || \"\", handler, selector, mappedTypes );\n    };\n\n    jQuery.fn.error = function() {\n        var args = Array.prototype.slice.call( arguments, 0);\n        migrateWarn(\"jQuery.fn.error() is deprecated\");\n        args.splice( 0, 0, \"error\" );\n        if ( arguments.length ) {\n            return this.bind.apply( this, args );\n        }\n        // error event should not bubble to window, although it does pre-1.7\n        this.triggerHandler.apply( this, args );\n        return this;\n    };\n\n    jQuery.fn.toggle = function( fn, fn2 ) {\n\n        // Don't mess with animation or css toggles\n        if ( !jQuery.isFunction( fn ) || !jQuery.isFunction( fn2 ) ) {\n            return oldToggle.apply( this, arguments );\n        }\n        migrateWarn(\"jQuery.fn.toggle(handler, handler...) is deprecated\");\n\n        // Save reference to arguments for access in closure\n        var args = arguments,\n            guid = fn.guid || jQuery.guid++,\n            i = 0,\n            toggler = function( event ) {\n                // Figure out which function to execute\n                var lastToggle = ( jQuery._data( this, \"lastToggle\" + fn.guid ) || 0 ) % i;\n                jQuery._data( this, \"lastToggle\" + fn.guid, lastToggle + 1 );\n\n                // Make sure that clicks stop\n                event.preventDefault();\n\n                // and execute the function\n                return args[ lastToggle ].apply( this, arguments ) || false;\n            };\n\n        // link all the functions, so any of them can unbind this click handler\n        toggler.guid = guid;\n        while ( i < args.length ) {\n            args[ i++ ].guid = guid;\n        }\n\n        return this.click( toggler );\n    };\n\n    jQuery.fn.live = function( types, data, fn ) {\n        migrateWarn(\"jQuery.fn.live() is deprecated\");\n        if ( oldLive ) {\n            return oldLive.apply( this, arguments );\n        }\n        jQuery( this.context ).on( types, this.selector, data, fn );\n        return this;\n    };\n\n    jQuery.fn.die = function( types, fn ) {\n        migrateWarn(\"jQuery.fn.die() is deprecated\");\n        if ( oldDie ) {\n            return oldDie.apply( this, arguments );\n        }\n        jQuery( this.context ).off( types, this.selector || \"**\", fn );\n        return this;\n    };\n\n// Turn global events into document-triggered events\n    jQuery.event.trigger = function( event, data, elem, onlyHandlers  ){\n        if ( !elem && !rajaxEvent.test( event ) ) {\n            migrateWarn( \"Global events are undocumented and deprecated\" );\n        }\n        return eventTrigger.call( this,  event, data, elem || document, onlyHandlers  );\n    };\n    jQuery.each( ajaxEvents.split(\"|\"),\n        function( _, name ) {\n            jQuery.event.special[ name ] = {\n                setup: function() {\n                    var elem = this;\n\n                    // The document needs no shimming; must be !== for oldIE\n                    if ( elem !== document ) {\n                        jQuery.event.add( document, name + \".\" + jQuery.guid, function() {\n                            jQuery.event.trigger( name, null, elem, true );\n                        });\n                        jQuery._data( this, name, jQuery.guid++ );\n                    }\n                    return false;\n                },\n                teardown: function() {\n                    if ( this !== document ) {\n                        jQuery.event.remove( document, name + \".\" + jQuery._data( this, name ) );\n                    }\n                    return false;\n                }\n            };\n        }\n    );\n\n\n})( jQuery, window );"],"sourceRoot":"/source/"}